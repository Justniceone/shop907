<?php
namespace frontend\controllers;
use backend\models\Article;
use backend\models\ArticleCategory;
use backend\models\Brand;
use backend\models\Goods;
use backend\models\GoodsCategory;
use frontend\models\Address;
use frontend\models\Cart;
use frontend\models\Login;
use frontend\models\Member;
use frontend\models\Order;
use frontend\models\OrderGoods;
use yii\db\Exception;
use yii\web\Controller;
use yii\web\Cookie;
use yii\web\ForbiddenHttpException;
use yii\web\NotFoundHttpException;
use yii\web\Response;

class ApiController extends Controller{
    public $enableCsrfValidation=false;
    public function init()
    {
        \Yii::$app->response->format=Response::FORMAT_JSON;
        parent::init(); // TODO: Change the autogenerated stub
    }

    //用户注册
    public function actionUserRegister(){
        $result = [
            'error'=>true,
            'msg'=>'',//错误信息,如果有
            'data'=>[]//返回数据
        ];
        if(\Yii::$app->request->isPost){
            $member = new Member();
            $member->load(\Yii::$app->request->post(),'');
            if($member->validate()){
                $member->save(false);
                //提示注册成功
                $result['error']=false;
                $result['data']['user_id']=$member->id;
            }else{
                //提示注册失败信息
                $result['msg']=$member->getErrors();
            }
        }else{
            $result['msg']='非法请求';
        }

        return $result;
    }

    //用户登录
    public function actionLogin(){
        $info=[
            'error'=>true,
            'msg'=>'登录成功'
        ];
        $request=\Yii::$app->request;
        $member=new Login();
        if($request->isPost){
            $member->load($request->post(),'');
            if($member->validate()){
                //根据用户名查找用户
                $model=Member::findOne(['username'=>$member->username]);
                if($model){
                    //验证密码是否正确
                    if(\Yii::$app->security->validatePassword($member->password,$model->password_hash)){
                        //登录成功
                        $info['error']=false;
                        //保存登录信息到session中
                        \Yii::$app->user->login($model);
                    }else{
                        $info['msg']='密码错误';
                    }
                }else{
                    //用户不存在
                    $info['msg']='用户名不存在';
                }
            }else{
                var_dump($member->getErrors());
            }

        }else{
            $info['msg']='非法请求';
        }
        return $info;
    }

    public function actionChangePwd(){
        //修改密码
        $info=[
            'error'=>false,
            'msg'=>'修改成功'
        ];
        //1.接收用户旧密码和新密码
        $request=\Yii::$app->request;
        if($request->isPost){
            $member=Member::findOne(['id'=>\Yii::$app->user->id]);
            //判断旧密码是否正确
            if(\Yii::$app->security->validatePassword($request->post('opassword'),$member->password_hash)){
                //替换为新密码
                $member->password_hash=\Yii::$app->security->generatePasswordHash($request->post('npassword'));
                $member->save();
            }else{
                $info['error']=true;
                $info['msg']='旧密码错误';
            }
        }else{
            $info['msg']='非法请求';
            $info['error']=true;
        }
        return $info;
    }

    public function actionInfomation(){
        //获取当前登录的用户信息
        $info=[
            'error'=>false,
            'msg'=>'',
            'data'=>[],
        ];
        $member=Member::findOne(['id'=>\Yii::$app->user->id]);
        if($member){
            $info['msg']='用户信息为';
            $info['data']['username']=$member->username;
            $info['data']['email']=$member->email;
            $info['data']['tel']=$member->tel;
        }else{
            $info['error']=true;
            $info['msg']='系统错误';
        }
        return $info;
    }

    public function actionAddAddress(){
        //添加收货地址
        $request=\Yii::$app->request;
        $address=new Address();
        if($request->isPost){
            $address->load($request->post(),'');
            if($address->validate()){
                $address->member_id=\Yii::$app->user->id;
                $address->save();
                $info=[
                    'error'=>false,
                    'msg'=>'添加地址成功',
                ];
            }else{
                $info=[
                    'error'=>true,
                    'msg'=>'添加地址失败',
                ];
            }
        }else{
            $info=[
                'error'=>true,
                'msg'=>'非法请求',
            ];
        }
        return $info;
    }

    public function actionEditAddress(){
        //修改地址
        $info=[
            'error'=>false,
            'msg'=>'',
        ];
        if(\Yii::$app->user->isGuest){
            $info=[
                'error'=>true,
                'msg'=>'请登录',
            ];
            return $info;
        }
        $request=\Yii::$app->request;
        //获取id,修改地址
        if($request->isPost){
            $address=Address::findOne(['id'=>$request->post('id')]);
            $address->load($request->post());
            if($address->validate()){
                $address->member_id=\Yii::$app->user->id;
                if($address->save()){
                    $info['msg']='修改成功';
                }else{
                    $info['msg']=$address->getErrors();
                }
            }
        }else{
            $info['error']=true;
            $info['msg']='非法请求';
        }
        return $info;
    }

    public function actionDeleteAddress(){
        //删除地址
        $info=[
            'error'=>false,
            'msg'=>'',
        ];
        $request=\Yii::$app->request;
        if($request->isPost){
            $address=Address::findOne(['id'=>$request->post('id')]);
            $address->delete();
            $info['msg']='删除成功';
        }
        return $info;
    }

    public function actionAddressLists(){
        //地址列表
        $address=Address::find()->where(['member_id'=>\Yii::$app->user->id])->asArray()->all();
        $info=[
            'error'=>false,
            'data'=>$address,
        ];
        return $info;
    }

    public function actionGoodsCategory(){
        //获取所有商品分类
        $goodscategories=GoodsCategory::find()->asArray()->all();
        $info=[
            'error'=>false,
            'data'=>$goodscategories,
        ];
        return $info;
    }

    public function actionChildrenCategory(){
        //获取某分类的所有子分类
        //获取分类名称
        $request=\Yii::$app->request;
        if($request->isPost){
            $categories=GoodsCategory::findOne(['name'=>$request->post('name')]);
            if($categories){
                $children=GoodsCategory::find()->where(['parent_id'=>$categories->id])->all();
                $info=[
                    'error'=>false,
                    'data'=>$children,
                ];
                return $info;
            }else{
                $info=[
                    'error'=>true,
                    'data'=>'没有该分类',
                ];
                return $info;
            }
        }
    }

    public function actionParentCategory(){
        //获取某分类的父分类
        $info=[
            'error'=>false,
            'msg'=>'',
            'data'=>[],
        ];
        $request=\Yii::$app->request;
        if($request->isPost){
            $name=$request->post('name');
            $category=GoodsCategory::findOne(['name'=>$name]);
            //判断是否是顶级分类
            if($category->parent_id==0){
                $info['msg']='已是顶级分类';
            }else{
                //查找上级分类
                $parent=GoodsCategory::findOne(['id'=>$category->parent_id]);
                $info['msg']='该分类上级分类为:'.$parent->name;
                $info['data']=$parent;
            }
        }
        return $info;
    }

    public function actionAllGoods(){
        $info=[
            'error'=>false,
            'msg'=>'',
            'data'=>[],
        ];
        //获取某分类下所有的商品
        $request=\Yii::$app->request;
        $name=$request->get('name');
        //获取该商品分类
        $category=GoodsCategory::findOne(['name'=>$name]);
        if($category){
            //查找对应的所有商品
            $goods=Goods::find()->where(['goods_category_id'=>$category->id])->asArray()->all();
            $info['msg']='该分类下的商品为:';
            $info['data']=$goods;
        }else{
            $info['msg']='没有该分类';
        }
       return $info;
    }

    public function actionBrandGoods(){
        $info=[
            'error'=>false,
            'msg'=>'品牌分类:',
            'data'=>[],
        ];
        //获取某品牌下所有商品
        $request=\Yii::$app->request;
        $brand=Brand::findOne(['name'=>$request->get('name')]);
        if($brand){
            //根据品牌查询产品
            $goods=Goods::find()->where(['brand_id'=>$brand->id])->asArray()->all();
            $info['msg']='该品牌下所有商品:';
            $info['data']=$goods;
        }else{
            $info['msg']='没有该品牌';
        }
        return $info;
    }

    public function actionArticleCategory(){

        //获取所有文章分类
        $articlecategories=ArticleCategory::find()->asArray()->all();
        $info=[
            'error'=>false,
            'msg'=>'文章分类:',
            'data'=>$articlecategories,
        ];
        return $info;
    }

    public function SomeCategory(){
        $info=[
            'error'=>false,
            'msg'=>'',
            'data'=>[],
        ];
        //获取某分类下面所有文章
        $request=\Yii::$app->request;
        $category=Article::findOne(['name'=>$request->get('name')]);
        if($category){
            $articles=Article::find()->where(['article_category_id'=>$category->id])->asArray()->all();
            $info['msg']='该分类下所有文章:';
            $info['data']=$articles;
        }
        else{
            $info['msg']='没有该分类';
        }
        return $info;
    }

    public function actionGetCategory(){

        //获取某文章所属分类
        $request=\Yii::$app->request;
        $article=Article::findOne(['name'=>$request->get('name')]);
        if($article){
            $category=ArticleCategory::findOne(['id'=>$article->article_category_id]);
            $info['msg']='该文章所属分类:'.$category->name;
        }else{
            $info['msg']='没有该文章';
        }
    }

    public function actionCart(){
        //添加商品到购物车
        $request=\Yii::$app->request;
        //接收商品id和数量
        $id=$request->post('id');
        $num=$request->post('num');
        $cookies=\Yii::$app->request->cookies;
        //判断是否有商品
        $carts=$cookies->getValue('cart');
        if($carts){
            $carts=unserialize($carts);
        }else{
            $carts=[];
        }
        //检测购物车中是否有已经添加过的商品
        if(array_key_exists($id,$carts)){
            $carts[$id]+=$num;
        }else{
            $carts[$id]=$num;
        }
        //将商品存入cookie中
        $cookies=\Yii::$app->response->cookies;
        $cookie=new Cookie();
        $cookie->name='cart';//设置cookie键名
        $cookie->value=serialize($carts);
        $cookies->add($cookie);
        return ['msg'=>'添加成功','error'=>false];

    }

    public function actionEdit(){
        //修改购物车商品数量
        $cookies=\Yii::$app->request->cookies;
        $request=\Yii::$app->request;
        $id=$request->post('id');
        $num=$request->post('num');
        if($cookies->getValue('cart')){
            //存在值直接序列化
            $data=unserialize($cookies->getValue('cart'));
        }else{
            $data=[];
        }

        //修改为当前数量
        $data[$id] =$num;
        //添加数据到cookie中
        $cookies=\Yii::$app->response->cookies;
        $cookie=new Cookie();//实例化cookie对象,添加属性
        $cookie->name='cart';//设置cookie键名
        //将数据保存成[id=>num,id2=>num2]的格式然后序列化保存
        $cookie->value=serialize($data);
        $cookies->add($cookie);

        return ['error'=>false,'msg'=>'修改成功'];
    }

    public function actionDelete(){
        //清空购物车
        $cookies=\Yii::$app->response->cookies;
        $cookies->remove('cart');
    }

    public function actionLists(){
        //获取购物车所有商品
        $cookies=\Yii::$app->request->cookies;//实例化只读cookie
        //根据cookie信息查找对应的商品
        $arrays=unserialize($cookies->getValue('cart')); //$arrays=[1=>2,3=>4,5=>6];
        if($arrays){
            $carts=Goods::find()->where(['in','id',array_keys($arrays)])->all();
        }else{
            $carts=[];
        }
        return $carts;
    }

    public function actionPays(){
        //获取支付方式
        $pays=Order::$payment;
        return $pays;
    }

    public function actionDelivery(){
        //获取送货方式
        $delivery=Order::$delivery;
        return $delivery;
    }

    public function actionSubmit(){
        //提交订单
        //判断是否登录
        if(\Yii::$app->user->isGuest){
            throw new ForbiddenHttpException('请登录');
        }
        $request=\Yii::$app->request;
        $order=new Order();
        if($request->isPost){
            $order->load($request->post(),'');
            //根据地址表id查询出详细的地址信息

            $address=Address::findOne(['id'=>$request->post('address_id')]);
            $order->member_id=\Yii::$app->user->id;
            $order->name=$address->username;
            $order->provice=$address->province;
            $order->city=$address->city;
            $order->area=$address->area;
            $order->address=$address->address;
            $order->tel=$address->tel;
            // $order->delivery_id=$request->post('delivery');
            $order->delivery_name=Order::$delivery[$order->delivery_id]['name'];
            $order->delivery_price=Order::$delivery[$order->delivery_id]['charge'];
            $order->payment_id=$request->post('pay');
            $order->payment_name=Order::$payment[$order->payment_id]['name'];
            $order->total=0;
            $order->status=2;//0已取消1待付款2待发货3待收货4完成）
            $order->trade_no=rand(100000,999999);//订单号随机数字
            $order->create_time=time();
            //操作数据库之前开启事务,确认库存情况
            $transaction=\Yii::$app->db->beginTransaction();
            try{

                if(!$order->save()){
                    var_dump($order->getErrors());
                }

                //根据购物车商品数量检测商品库存,保证每种商品库存足够
                $carts=Cart::find()->where(['member_id'=>\Yii::$app->user->id])->all();
                //遍历确认数量
                foreach ($carts as $cart){
                    $good=Goods::findOne(['id'=>$cart->goods_id]);

                    if($good->stock < ($cart->amount)){
                        throw new Exception($good->name.'库存不足,停止下单');
                    }
                    $good->stock-=$cart->amount;
                    $good->save();
                    //新的订单商品详情表
                    $order_goods=new OrderGoods();
                    $order_goods->order_id=$order->id;
                    $order_goods->goods_id=$cart->goods_id;
                    $order_goods->goods_name=$good->name;
                    $order_goods->logo=$good->logo;
                    $order_goods->price=$good->shop_price;
                    $order_goods->amount=$cart->amount;
                    $order_goods->total=$cart->amount * $good->shop_price;
                    $order_goods->save();
                    //计算订单总金额
                    $order->total+=$order_goods->total;
                }

                //加上运费
                $order->total+=$order->delivery_price;
                $order->save();
                //订单完成,清空购物车
                Cart::deleteAll(['member_id'=>\Yii::$app->user->id]);

                //提交事务
                $transaction->commit();

                return ['error'=>false,'msg'=>'生成订单成功'];
            }catch (Exception $exception){
                //库存不够,不能下单,回滚数据
                $transaction->rollBack();
                return ['error'=>true,'msg'=>'下单失败'];
            }
        }
    }

    public function actionOrder(){
        //获取当前用户订单列表
        $orders=Order::find()->where(['id'=>\Yii::$app->user->id])->all();
        return $orders;
    }

    public function actionCancel(){
        //取消订单
        //接收订单id
        $id=\Yii::$app->request->post('id');
        $order=Order::findOne(['id'=>$id]);
        if($order){
            $order->delete();
        }else{
            throw new NotFoundHttpException('没有该订单');
        }
    }
}